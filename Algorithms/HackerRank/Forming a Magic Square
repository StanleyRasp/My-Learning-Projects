# The program checks the minimal "cost" of changing a given 3x3 matrix to a magic square. The cost is defined as |givenNumber - changedNumber|.
# Time complexity is O(1) 

def formingMagicSquare(s):
    magicSquares = [
        [[8, 1, 6], [3, 5, 7], [4, 9, 2]],
        [[6, 1, 8], [7, 5, 3], [2, 9, 4]],
        [[4, 9, 2], [3, 5, 7], [8, 1, 6]],
        [[2, 9, 4], [7, 5, 3], [6, 1, 8]],
        [[8, 3, 4], [1, 5, 9], [6, 7, 2]],
        [[4, 3, 8], [9, 5, 1], [2, 7, 6]],
        [[6, 7, 2], [1, 5, 9], [8, 3, 4]],
        [[2, 7, 6], [9, 5, 1], [4, 3, 8]],
    ]
    minCost = 100

    for possibility in magicSquares:
        cost = 0
        for y in range(3):
            for x in range(3):
                if s[y][x] != possibility[y][x]:
                    cost += abs(s[y][x] - possibility[y][x])

        if cost < minCost:
            minCost = cost

        return minCost
