# The program returns the ranking placements after each score from the score array. 
# The ranking scores from other players are in the form of the "ranked" array. It uses the Dense Ranking system. Both are sorted ranked[low -> high], player[high -> low]
# The time complexity is O(n) thanks to the fact that each check of the score starts on the last checked index.

def climbingLeaderboard(ranked, player):
    
    newRanking = [[ranked[0], 1]]
    placings = []
    
    for i in range(1, len(ranked)):
        if ranked[i] == newRanking[i-1][0]:
            newRanking.append([ranked[i], newRanking[i-1][1]])
        else:
            newRanking.append([ranked[i], newRanking[i-1][1]+1])
            
    newRanking.reverse()
    
    print(newRanking, player)
    
    lastIndex = 0
    for score in player:
        for i in range(lastIndex, len(newRanking)):
            if score < newRanking[i][0]:
                placings.append(newRanking[i][1] + 1);
                lastIndex = i
                break
            elif score == newRanking[i][0]:
                placings.append(newRanking[i][1])
                lastIndex = i
                break
    
    placings.extend([1] * (len(player) - len(placings)))
    
    return placings

