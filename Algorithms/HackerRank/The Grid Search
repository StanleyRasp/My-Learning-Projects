# https://www.hackerrank.com/challenges/the-grid-search/problem
# The program looks for the 2D pattern P in the 2D grid G. If it finds it it returns "YES" otherwise it returns "NO".
# Time complexity around O(n^2) in the worst case

def gridSearch(G, P):
    sizeG = [len(G[0]), len(G)]
    sizeP = [len(P[0]), len(P)]
    
    for y in range(sizeG[1] - sizeP[1] + 1):
        for x in range(sizeG[0] - sizeP[0] + 1):
            yDiff = 0
            xDiff = 0
            while G[y+yDiff][x+xDiff] == P[yDiff][xDiff]:
                if xDiff == sizeP[0]-1 and yDiff == sizeP[1]-1:
                    return "YES"
                
                if xDiff < sizeP[0]-1:
                    xDiff += 1
                else:
                    yDiff += 1
                    xDiff = 0
                    
                print(y, yDiff, x, xDiff)
    
    return "NO"
